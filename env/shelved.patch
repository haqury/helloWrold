Index: .env.example
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>; Файл настроек среды\n;\n; Разбирается функцией php_ini_parse(), поэтому:\n; а) строки с комментариями начинаются с точки с запятой;\n; б) наличие пробелов рядом со знаком равенства игнорируется;\n; в) значение \"true\" в коде преобразуется в \"1\", а \"false\" - в \"\".\n;\n; Имя пользователя БД\nDB_USER = mysqluser\n; Пароль пользователя БД\nDB_PASS = password\n; Имя конфигурации БД в Ice/Config/Data/Source/Manager.php\n; (например: development, test, production или reserve)\nDB_ENV = test\n; Имя базового хоста (от которого строятся поддомены и все дела)\n; Прокидывается в $_SERVER['SERVER_NAME'] в IcEngine::setSiteLocation()\nHOST = 32top.ru\n; Схема URI (например, http или https)\nSCHEME = http\n; Режим работы JS (например DEVELOPER-файлы берутся не минифицированные, RELEASE)\nJSMODE = DEVELOPER\n; Режим работы PYPHRASY (например development, test-тестовый сервак, production-глобальный сервак)\nPYPHRASY = development\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .env.example	(revision 25244:a25b0f16f32116bcd6be26b8f567494aed82302d)
+++ .env.example	(revision 25244+:a25b0f16f321+)
@@ -19,5 +19,5 @@
 SCHEME = http
 ; Режим работы JS (например DEVELOPER-файлы берутся не минифицированные, RELEASE)
 JSMODE = DEVELOPER
-; Режим работы PYPHRASY (например development, test-тестовый сервак, production-глобальный сервак)
-PYPHRASY = development
+; Режим работы PYPHRASY_ENV (например development, test-тестовый сервак, production-глобальный сервак)
+PYPHRASY_ENV = development
Index: IcEngine/Class/Helper/Env.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\n/**\n * Хелпер для работы с файлом настроек среды (.env)\n *\n * Файл .env должен находиться в корне проекта. Для парсинга файла\n * пока используется стандартная функция parse_ini_file(), что означает:\n * а) строки с комментариями в файле должны начинаться с символа \";\";\n * б) наличие пробелов рядом со знаком равенства игнорируется;\n * в) значения true приводятся к \"1\", а false - к \"\".\n *\n * @Service(\"helperEnv\")\n *\n * @author Igor Bauer <theiggs@gmail.com>\n */\nclass Helper_Env extends Helper_Abstract\n{\n    /**\n     * Загруженные настройки среды\n     *\n     * @var string[]\n     */\n    protected $env = [];\n\n    /**\n     * Загружает настройки из файла .env\n     *\n     * @return void\n     */\n    public function load()\n    {\n        $filename = IcEngine::root() . '.env';\n        $this->env = parse_ini_file($filename);\n        if (!$this->env) {\n            /** @todo Бросать Exception, когда научимся их обрабатывать */\n            die('.env file not found in project root.');\n        }\n    }\n\n    /**\n     * Возвращает значение настройки\n     *\n     * @param string $name Имя настройки\n     * @return string\n     */\n    public function get($name)\n    {\n        if (!$this->env) {\n            $this->load();\n        }\n        if (!isset($this->env[$name])) {\n            /** @todo Бросать Exception, когда научимся их обрабатывать */\n            die(\"Parameter {$name} not found in .env file.\");\n        }\n        return $this->env[$name];\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- IcEngine/Class/Helper/Env.php	(revision 6073:1b2addc8396041fab8143c4c615467bfc5e7e6ba)
+++ IcEngine/Class/Helper/Env.php	(revision 6073+:1b2addc83960+)
@@ -33,7 +33,7 @@
         $this->env = parse_ini_file($filename);
         if (!$this->env) {
             /** @todo Бросать Exception, когда научимся их обрабатывать */
-            die('.env file not found in project root.');
+            App::debug()->log('.env file not found in project root.' . PHP_EOL, 2);
         }
     }
 
@@ -50,7 +50,7 @@
         }
         if (!isset($this->env[$name])) {
             /** @todo Бросать Exception, когда научимся их обрабатывать */
-            die("Parameter {$name} not found in .env file.");
+            App::debug()->log("Parameter {$name} not found in .env file."  . PHP_EOL, 2);
         }
         return $this->env[$name];
     }
Index: IcEngine/Controller/Annotation/Cache.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\n/**\n * Контроллер для аннотаций типа \"Cache\"\n * \n * @author morph\n */\nclass Controller_Annotation_Cache extends Controller_Abstract\n{\n    /**\n     * Распарсить аннотацию\n     * \n     * @Context(\"helperCodeGenerator\")\n     * @Template(null)\n     * @Validator(\"Not_Null\"={\"data\"})\n     */\n    public function update($data, $context) \n    {\n        $caches = array();\n        $config = $context->configManager->get('Controller_Manager');\n        foreach ($data as $id => $subData) {\n            list($preControllerName, $methodName) = explode('/', $id);\n            if (!$subData) {\n                continue;\n            }\n            $controllerName = str_replace(\n                'Controller_', '', $preControllerName\n            );\n            $hasAnnotation = false;\n            foreach (array_keys($subData) as $annotationName) {\n                if (strpos($annotationName, 'Cache') === 0) {\n                    $hasAnnotation = true;\n                    break;\n                }\n            }\n            if (!$hasAnnotation) {\n                continue;\n            }\n            if (empty($subData['Cache'])) {\n                continue;\n            }\n            $cache = reset($subData['Cache']['data'][0]);\n            if (is_bool($cache) && !$cache) {\n                continue;\n            }\n            $expiration = !empty($subData['CacheExpiration']['data'])\n                ? reset($subData['CacheExpiration']['data'][0]) : 0;\n            if (!$expiration && \n                isset($subData['Cache']['data'][0]['expiration'])) {\n                $expiration = $subData['Cache']['data'][0]['expiration'];\n            } else {\n                $profile = !empty($cache['profile'])\n                    ? $cache['profile'] : null;\n                if ($profile) {\n                    $profile = $config->profiles[$profile];\n                    if ($profile) {\n                        $expiration = $profile['expiration'];\n                    }\n                }\n            }\n            if (!$expiration) {\n                continue;\n            }\n            \n            $tags = array();\n            if (!empty($subData['CacheTags']['data'])) {\n                $tags = array_values($subData['CacheTags']['data'][0]);\n            } elseif (isset($subData['Cache']['data'][0]['tags'])) {\n                $tags = array_values($subData['Cache']['data'][0]['tags']);\n            }\n            $cacheKey = array();\n            if (!empty($subData['CacheKey']['data'])) {\n                $cacheKey = array_values($subData['CacheKey']['data']);\n            } elseif (isset($subData['Cache']['data'][0]['cacheKey'])) {\n                $cacheKey = array_values(\n                    $subData['Cache']['data'][0]['cacheKey']\n                );\n            }\n            $vars = array();\n            if (!empty($data['CacheVars'])) {\n                $vars = array_values($data['CacheVars']['data'][0]);\n            } elseif (isset($subData['Cache']['data'][0]['vars'])) {\n                $vars = array_values($subData['Cache']['data'][0]['vars']);\n            }\n            $key = $controllerName . '::' . $methodName;\n            $theCache = array(\n                'action'        => $key,\n                'expiration'    => $expiration, \n                'cacheKey'      => $cacheKey,\n                'tags'          => $tags,\n                'vars'          => $vars\n            );\n            $caches[$key] = $theCache;\n        }\n        $profiles = $config['profiles'];\n        if ($profiles) {\n            $profiles = $profiles->__toArray();\n        }\n        if (!empty($config['actions'])) {\n            foreach ($config['actions']->__toArray() as $actionName => $data) {\n                if (isset($caches[$actionName])) {\n                    continue;\n                }\n                $data['action'] = $actionName;\n                $caches[$actionName] = $data;\n            }\n        }\n        ksort($caches);\n        $output = $context->helperCodeGenerator->fromTemplate(\n            'controllerCache',\n            array (\n                'actions'   => $caches,\n                'profiles'  => $profiles\n            )\n        );\n        $result = array();\n        $lines = explode(PHP_EOL, $output);\n        foreach ($lines as $i => $line) {\n            $baseLine = $line;\n            $line = str_replace(array(\"\\n\", \"\\r\"), '', trim($line));\n            if (!$line) {\n                continue;\n            }\n            $result[] = $baseLine;\n        }\n        $filename = IcEngine::root() . 'Ice/Config/Controller/Manager.php';\n        file_put_contents($filename, implode(PHP_EOL, $result));\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- IcEngine/Controller/Annotation/Cache.php	(revision 6073:1b2addc8396041fab8143c4c615467bfc5e7e6ba)
+++ IcEngine/Controller/Annotation/Cache.php	(revision 6073+:1b2addc83960+)
@@ -51,7 +51,7 @@
             } else {
                 $profile = !empty($cache['profile'])
                     ? $cache['profile'] : null;
-                if ($profile) {
+                if ($config->profiles[$profile]) {
                     $profile = $config->profiles[$profile];
                     if ($profile) {
                         $expiration = $profile['expiration'];
Index: IcEngine/Class/Executor.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\n\n\n/**\n\n * Исполнитель всякого. Необходим для того, чтобы исполнять всякое. (с) morph\n\n * Предназначени для запуска функций/методов и кэширования результатов\n\n * их работы.\n\n * \n\n * @author goorus, morph\n\n * @Service(\"executor\")\n\n */\n\nclass Executor extends Manager_Abstract\n\n{\n\n\t/**\n\n\t * Разделитель частей при формировании ключа для кэширования\n\n     * \n\n\t * @var string\n\n\t */\n\n\tconst DELIM = '/';\n\n\n\n\t/**\n\n\t * Кэшер\n\n     * \n\n\t * @var Data_Provider_Abstract\n\n\t */\n\n\tprotected $cacher;\n\n\n\n\t/**\n\n\t * @inheritdoc\n\n\t */\n\n\tprotected $config = array(\n\n\t\t/**\n\n\t\t * @desc Провайдер данных, используемый для кэширования по умолчанию\n\n\t\t * (Data_Provider).\n\n\t\t * @var string\n\n\t\t */\n\n\t\t'cache_provider'\t=> null,\n\n\t\t/**\n\n\t\t * @desc Описание кэширования для отдельных функций\n\n\t\t * @var array\n\n\t\t */\n\n\t\t'functions'\t\t\t=> array (\n\n\t\t),\n\n        /**\n\n         * Объекты для логирования\n\n         */\n\n        'forLog'    => array(\n\n            'Controller_Manager'\n\n        ),\n\n        'logProvider'   => 'Controller_Log',\n\n\t\t/**\n\n\t\t * @desc Провайдер поставки тэгов\n\n\t\t */\n\n\t\t'tag_provider'\t\t=> null,\n\n\t\t'tags'\t\t\t\t=> array()\n\n\t);\n\n\n\n    /**\n\n\t * Возвращает ключ для кэширования\n\n\t * \n\n     * @param function $function Кэшируемая функция.\n\n\t * @param array $args Аргкументы функции.\n\n\t * @return string Ключ кэша.\n\n\t */\n\n\tprotected function getCacheKey($function, array $args)\n\n\t{\n\n\t\t$key = $this->getFunctionName($function) . self::DELIM;\n\n\t\tif ($args) {\n\n\t\t\t$key .= md5(json_encode($args));\n\n\t\t}\n\n\t\treturn $key;\n\n\t}\n\n    \n\n\t/**\n\n\t * Возвращает название функции\n\n     * \n\n\t * @param string $function Функция\n\n\t * @return string\n\n\t */\n\n\tprotected function getFunctionName($function)\n\n\t{\n\n\t\tif (is_array($function)) {\n\n            $first = $function[0];\n\n\t\t\tif (is_object ($function[0])) {\n\n                $first = get_class($first);\n\n            }\n\n\t\t\treturn $first . self::DELIM . $function[1];\n\n\t\t} \n\n        return $function;\n\n\t}\n\n    \n\n    /**\n\n\t * Выполняет переданную функцию.\n\n\t * \n\n     * @param function $function Функция.\n\n\t * @param array $args Аргументы функции.\n\n\t * @param Objective $options [optional] Опции кэширования.\n\n\t * \t\tЕсли не переданы, будут использованы настройки из конфига.\n\n\t * @return mixed Результат выполнения функции.\n\n\t */\n\n\tpublic function execute($function, array $args = array(), $options = null)\n\n\t{\n\n\t\t$functionName = $this->getFunctionName($function);\n\n        $config = $this->config();\n\n\t\tif ($options) {\n\n\t\t\treturn $this->executeCaching($function, $args, $options);\n\n\t\t} elseif ($config->functions[$functionName]) {\n\n\t\t\t$functionOption = $config->functions[$functionName];\n\n            return $this->executeCaching($function, $args, $functionOption);\n\n\t\t}\n\n\t\treturn $this->executeUncaching($function, $args);\n\n\t}\n\n\n\n\t/**\n\n\t * Выполнение функции подлежащей кэшированию.\n\n\t * \n\n     * @param function $function Функция.\n\n\t * @param array $args Аргументы функции.\n\n\t * @param Objective $options Опции кэширования.\n\n\t * @return mixed Результат выполнения функции.\n\n\t */\n\n\tpublic function executeCaching($function, array $args, $options)\n\n\t{\n\n        $cache = array();\n\n        $tagValid = true;\n\n        $expiresValid = true;\n\n        if ($this->getCacher()) {\n\n            $keyFunction = $function;\n\n            if (is_object($keyFunction[0])) {\n\n                $keyFunction[0] = get_class($keyFunction[0]);\n\n            }\n\n            if (isset($options['cacheKey'])) {\n\n                $args[] = call_user_func(array(\n\n                    $this->getService($options['cacheKey'][0]),\n\n                    $options['cacheKey'][1]\n\n                ));\n\n            }\n\n            $key = $this->getCacheKey($keyFunction, $args);\n\n            $cache = $this->getCacher()->get($key);\n\n            $tagValid = $this->isTagValid($cache, $options);\n\n            $expiresValid = $this->isNotExpires($cache, $options);\n\n        }\n\n\t\t$inputValid = $this->isInputValid(\n\n            $options, !empty($args[1]) ? $args[1] : array()\n\n        );\n\n        $functionName = is_object($function[0]) \n\n            ? get_class($function[0]) : $function[0];\n\n\t\tif ($cache && !$options->forceRecache && $inputValid) {\n\n            if ($tagValid && $expiresValid) {\n\n                if (Tracer::$enabled) {\n\n\t\t\t\t\tif ($functionName == 'Controller_Manager') {\n\n\t\t\t\t\t\tTracer::incCachedControllerCount();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn $cache['v'];\n\n            }\n\n\t\t}\n\n\t\t$start = microtime(true);\n\n\t\t$value = $this->executeUncaching($function, $args);\n\n\t\t$end = microtime(true);\n\n\t\t$delta = $end - $start;\n\n        $config = $this->config();\n\n        $forLog = $config->forLog->__toArray();\n\n\t\tif (in_array($functionName, $forLog)) {\n\n            $this->logFunction($function, $delta, $args);\n\n\t\t}\n\n        if ($this->cacher && $inputValid) {\n\n            $cacheValue = array(\n\n                'v' => $value,\n\n                'a' => time()\n\n            );\n\n            $tags = array();\n\n            if ($options->current_tags) {\n\n                $tags = $options->current_tags->__toArray();\n\n            }\n\n            if ($tags) {\n\n                $cacheValue['t'] = $tags;\n\n            }\n\n            $this->cacher->set($key, $cacheValue);\n\n            if ($cache) {\n\n                $this->cacher->unlock($key);\n\n            }\n\n        }\n\n\t\treturn $value;\n\n\t}\n\n\n\n\t/**\n\n\t * Выполнение функции без кэширования.\n\n\t * \n\n     * @param function $function Функция.\n\n\t * @param array $args Аргументы функции.\n\n\t * @return mixed Результат выполнения функции.\n\n\t */\n\n\tpublic function executeUncaching($function, array $args)\n\n\t{\n\n\t\treturn call_user_func_array($function, $args);\n\n\t}\n\n\n\n\t/**\n\n\t * Возвращает текущий кэшер.\n\n\t * \n\n     * @return Data_Provider_Abstract|null\n\n\t */\n\n\tpublic function getCacher()\n\n\t{\n\n\t\tif ($this->cacher) {\n\n            return $this->cacher;\n\n        }\n\n        $config = $this->config();\n\n        if ($config->cache_provider) {\n\n            $this->cacher = $this->getService('dataProviderManager')->get(\n\n                $config->cache_provider\n\n            );\n\n        } \n\n\t\treturn $this->cacher;\n\n\t}\n\n\n\n    /**\n\n     * Проверяет валидны ли данные входного транспорта\n\n     * \n\n     * @param Objective $options\n\n     * @param array $args\n\n     * @return boolean\n\n     */\n\n    protected function isInputValid($options, $args)\n\n    {\n\n        $inputValid = true;\n\n\t\tif (!$options->inputArgs) {\n\n            return $inputValid;\n\n        }\n\n        foreach ($options->inputArgs as $arg) {\n\n            if (isset($args[$arg])) {\n\n                $inputValid = false;\n\n                break;\n\n            }\n\n        }\n\n        return $inputValid;\n\n    }\n\n    \n\n    /**\n\n     * Не вышел ли срок валидности кэша\n\n     * \n\n     * @param array $cache\n\n     * @param Objective $options\n\n     * @return boolean\n\n     */\n\n    protected function isNotExpires($cache, $options)\n\n    {\n\n        $expiration = (int) $options->expiration;\n\n        return ($cache['a'] + $expiration > time()) || $expiration == 0;\n\n    }\n\n    \n\n    /**\n\n     * Проверяет валидны ли текущие тэги кэша\n\n     * \n\n     * @param array $cache\n\n     * @param Objective $options\n\n     * @return boolean\n\n     */\n\n    protected function isTagValid($cache, $options)\n\n    {\n\n        $tagValid = true;\n\n        if (empty($cache['t'])) {\n\n            $tagValid = true;\n\n        } elseif ($options->current_tags) {\n\n            $currentTags = $options->current_tags->__toArray();\n\n            if (array_diff($currentTags, $cache['t'])) {\n\n                $tagValid = false;\n\n            }\n\n        }\n\n        return $tagValid;\n\n    }\n\n    \n\n    /**\n\n     * Логирует вызов функции\n\n     * \n\n     * @param array $function\n\n     * @param string $delta\n\n     * @param array $args\n\n     */\n\n    protected function logFunction($function, $delta, $args)\n\n    {\n\n        $config = $this->config();\n\n        if (is_object($function[0])) {\n\n            $function[0] = get_class($function[0]);\n\n        }\n\n        $provider = $this->getService('dataProviderManager')->get(\n\n            $config->logProvider\n\n        );\n\n        $logKey = 'log_' . uniqid();\n\n        $provider->set($logKey, array(\n\n            'function'\t=> $function,\n\n            'args'\t\t=> $args,\n\n            'delta'\t\t=> $delta,\n\n            'last'\t\t=> time()\n\n        ));\n\n    }\n\n    \n\n\t/**\n\n\t * Устаналвивает кэшер\n\n     * \n\n\t * @param Data_Provider_Abstract $cacher\n\n\t */\n\n\tpublic function setCacher($cacher)\n\n\t{\n\n\t\t$this->cacher = $cacher;\n\n\t} \n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- IcEngine/Class/Executor.php	(revision 6073:1b2addc8396041fab8143c4c615467bfc5e7e6ba)
+++ IcEngine/Class/Executor.php	(revision 6073+:1b2addc83960+)
@@ -203,19 +203,14 @@
 		$functionName = $this->getFunctionName($function);
 
         $config = $this->config();
-
-		if ($options) {
-
-			return $this->executeCaching($function, $args, $options);
-
-		} elseif ($config->functions[$functionName]) {
-
-			$functionOption = $config->functions[$functionName];
-
-            return $this->executeCaching($function, $args, $functionOption);
-
-		}
-
+        if (!empty(App::helperEnv()->get('CACHE_HTML'))) {
+            if ($options) {
+                return $this->executeCaching($function, $args, $options);
+            } elseif ($config->functions[$functionName]) {
+                $functionOption = $config->functions[$functionName];
+                return $this->executeCaching($function, $args, $functionOption);
+            }
+        }
 		return $this->executeUncaching($function, $args);
 
 	}
